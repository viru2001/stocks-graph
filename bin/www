#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('nodejs-ssl:server');
var http = require('http');
var yahoo = require('../services/finance.js');
// var socket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 * Provide default stock ticker info on server start.
 */

yahoo.getStocksBySymbol(['TSLA', 'MSFT', 'AMZN'])
	.then(data => {
		yahoo.storeStocksLocally(data);
		server.listen(port);
	})
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket setup.
 */

// var io = socket(server);

// io.on('connection', function (socket) {
// 	console.log('client made connection : ', socket.id);

// 	// create
// 	socket.on('add', data => {
// 		socket.broadcast.emit('add', data);
// 	})

// 	// update
// 	socket.on('timescale', data => {
// 		socket.broadcast.emit('timescale', data);
// 	})

// 	// delete
// 	socket.on('delete', data => {
// 		socket.broadcast.emit('delete', data);
// 	})

// 	// toggle
// 	socket.on('toggle', data => {
// 		socket.broadcast.emit('toggle', data);
// 	})

// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	console.log('app listening on port ' + port);
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
